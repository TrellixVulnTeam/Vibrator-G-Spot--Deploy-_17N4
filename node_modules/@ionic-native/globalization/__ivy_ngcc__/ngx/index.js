import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Globalization = /** @class */ (function (_super) {
    __extends(Globalization, _super);
    function Globalization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Globalization.prototype.getPreferredLanguage = function () { return cordova(this, "getPreferredLanguage", {}, arguments); };
    Globalization.prototype.getLocaleName = function () { return cordova(this, "getLocaleName", {}, arguments); };
    Globalization.prototype.dateToString = function (date, options) { return cordova(this, "dateToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.stringToDate = function (dateString, options) { return cordova(this, "stringToDate", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.getDatePattern = function (options) { return cordova(this, "getDatePattern", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.getDateNames = function (options) { return cordova(this, "getDateNames", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.isDayLightSavingsTime = function (date) { return cordova(this, "isDayLightSavingsTime", {}, arguments); };
    Globalization.prototype.getFirstDayOfWeek = function () { return cordova(this, "getFirstDayOfWeek", {}, arguments); };
    Globalization.prototype.numberToString = function (numberToConvert, options) { return cordova(this, "numberToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.stringToNumber = function (stringToConvert, options) { return cordova(this, "stringToNumber", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.getNumberPattern = function (options) { return cordova(this, "getNumberPattern", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.getCurrencyPattern = function (currencyCode) { return cordova(this, "getCurrencyPattern", {}, arguments); };
    Globalization.pluginName = "Globalization";
    Globalization.plugin = "cordova-plugin-globalization";
    Globalization.pluginRef = "navigator.globalization";
    Globalization.repo = "https://github.com/apache/cordova-plugin-globalization";
    Globalization.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Globalization.ɵfac = function Globalization_Factory(t) { return ɵGlobalization_BaseFactory(t || Globalization); };
Globalization.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Globalization, factory: function (t) { return Globalization.ɵfac(t); } });
var ɵGlobalization_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Globalization);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Globalization, [{
        type: Injectable
    }], null, null); })();
    return Globalization;
}(IonicNativePlugin));
export { Globalization };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZ2xvYmFsaXphdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFFYyxJQXlDcUIsaUNBQWlCO0FBQUM7QUFFOUI7QUFBeUU7QUFBTSxJQUlwRyw0Q0FBb0I7QUFLRyxJQUl2QixxQ0FBYTtBQUtHLElBU2hCLG9DQUFZLGFBQUMsSUFBVSxFQUFFLE9BQTZCO0FBS2YsSUFTdkMsb0NBQVksYUFDVixVQUFrQixFQUNsQixPQUE2QjtBQU16QixJQWVOLHNDQUFjLGFBQ1osT0FBNkI7QUFLN0IsSUFjRixvQ0FBWSxhQUFDLE9BQXVDO0FBS3ZCLElBSzdCLDZDQUFxQixhQUFDLElBQVU7QUFLbEIsSUFJZCx5Q0FBaUI7QUFLRyxJQVFwQixzQ0FBYyxhQUFDLGVBQXVCLEVBQUUsT0FBeUI7QUFNN0IsSUFRcEMsc0NBQWMsYUFBQyxlQUF1QixFQUFFLE9BQXlCO0FBS2pDLElBT2hDLHdDQUFnQixhQUFDLE9BRWhCO0FBSWEsSUFlZCwwQ0FBa0IsYUFDaEIsWUFBb0I7QUFJYjtBQUVJO0FBTVQ7QUFBeUQ7QUFBbUY7aURBbkxqSixVQUFVOzs7OzswQkFDTDtBQUFDLHdCQTdDUDtBQUFFLEVBNkNpQyxpQkFBaUI7QUFDbkQsU0FEWSxhQUFhO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBHbG9iYWxpemF0aW9uT3B0aW9ucyB7XG4gIGZvcm1hdExlbmd0aDogc3RyaW5nO1xuICBzZWxlY3Rvcjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEdsb2JhbGl6YXRpb25cbiAqIEBwcmVtaWVyIGdsb2JhbGl6YXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gb2J0YWlucyBpbmZvcm1hdGlvbiBhbmQgcGVyZm9ybXMgb3BlcmF0aW9ucyBzcGVjaWZpYyB0byB0aGUgdXNlcidzIGxvY2FsZSwgbGFuZ3VhZ2UsIGFuZCB0aW1lem9uZS5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogV2l0aCB0aGUgW0VDTUEgSW50ZXJuYXRpb25hbGl6YXRpb24gQVBJXShodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtNDAyLzEuMC8pIG5vdyBzdXBwb3J0ZWQgb24gaU9TLCBBbmRyb2lkIGFuZCBXaW5kb3dzIGRldmljZXMsIHRoaXMgcGx1Z2luIGlzIG5vdCByZXF1aXJlZCBhbnkgbW9yZS5cbiAqIE1pZ3JhdGluZyBmcm9tIHRoaXMgcGx1Z2luIHRvIHRoZSBbRUNNQSBJbnRlcm5hdGlvbmFsaXphdGlvbiBBUEldKGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS00MDIvMS4wLykgaXMgZXhwbGFpbmVkIGluIHRoaXMgW0NvcmRvdmEgYmxvZyBwb3N0XShodHRwczovL2NvcmRvdmEuYXBhY2hlLm9yZy9uZXdzLzIwMTcvMTEvMjAvbWlncmF0ZS1mcm9tLWNvcmRvdmEtZ2xvYmFsaXphdGlvbi1wbHVnaW4uaHRtbCkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBHbG9iYWxpemF0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9nbG9iYWxpemF0aW9uL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBnbG9iYWxpemF0aW9uOiBHbG9iYWxpemF0aW9uKSB7IH1cbiAqXG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZ2xvYmFsaXphdGlvbi5nZXRQcmVmZXJyZWRMYW5ndWFnZSgpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XG4gKlxuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEdsb2JhbGl6YXRpb25PcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnR2xvYmFsaXphdGlvbicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWdsb2JhbGl6YXRpb24nLFxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuZ2xvYmFsaXphdGlvbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWdsb2JhbGl6YXRpb24nLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdsb2JhbGl6YXRpb24gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBCQ1AtNDcgY29tcGxpYW50IGxhbmd1YWdlIGlkZW50aWZpZXIgdGFnIHRvIHRoZSBzdWNjZXNzQ2FsbGJhY2sgd2l0aCBhIHByb3BlcnRpZXMgb2JqZWN0IGFzIGEgcGFyYW1ldGVyLiBUaGF0IG9iamVjdCBzaG91bGQgaGF2ZSBhIHZhbHVlIHByb3BlcnR5IHdpdGggYSBTdHJpbmcgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt2YWx1ZTogc3RyaW5nfT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFByZWZlcnJlZExhbmd1YWdlKCk6IFByb21pc2U8eyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgQkNQIDQ3IGNvbXBsaWFudCBsb2NhbGUgaWRlbnRpZmllciBzdHJpbmcgdG8gdGhlIHN1Y2Nlc3NDYWxsYmFjayB3aXRoIGEgcHJvcGVydGllcyBvYmplY3QgYXMgYSBwYXJhbWV0ZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt2YWx1ZTogc3RyaW5nfT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldExvY2FsZU5hbWUoKTogUHJvbWlzZTx7IHZhbHVlOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBkYXRlIHRvIHN0cmluZ1xuICAgKiBAcGFyYW0ge0RhdGV9IGRhdGUgRGF0ZSB5b3Ugd2lzaCB0byBjb252ZXJ0XG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSBjb252ZXJ0ZWQgZGF0ZS4gTGVuZ3RoLCBzZWxlY3Rvci5cbiAgICogQHJldHVybnMge1Byb21pc2U8e3ZhbHVlOiBzdHJpbmd9Pn0gUmV0dXJucyBhIHByb21pc2Ugd2hlbiB0aGUgZGF0ZSBoYXMgYmVlbiBjb252ZXJ0ZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIGRhdGVUb1N0cmluZyhkYXRlOiBEYXRlLCBvcHRpb25zOiBHbG9iYWxpemF0aW9uT3B0aW9ucyk6IFByb21pc2U8eyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIGEgZGF0ZSBmb3JtYXR0ZWQgYXMgYSBzdHJpbmcsIGFjY29yZGluZyB0byB0aGUgY2xpZW50J3MgdXNlciBwcmVmZXJlbmNlcyBhbmQgY2FsZW5kYXIgdXNpbmcgdGhlIHRpbWUgem9uZSBvZiB0aGUgY2xpZW50LCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkYXRlIG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVTdHJpbmcgRGF0ZSBhcyBhIHN0cmluZyB0byBiZSBjb252ZXJ0ZWRcbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIGNvbnZlcnRlZCBkYXRlLiBMZW5ndGgsIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF5OiBudW1iZXIsIGhvdXI6IG51bWJlciwgbWludXRlOiBudW1iZXIsIHNlY29uZDogbnVtYmVyLCBtaWxsaXNlY29uZDogbnVtYmVyIH0+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aGVuIHRoZSBkYXRlIGhhcyBiZWVuIGNvbnZlcnRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgc3RyaW5nVG9EYXRlKFxuICAgIGRhdGVTdHJpbmc6IHN0cmluZyxcbiAgICBvcHRpb25zOiBHbG9iYWxpemF0aW9uT3B0aW9uc1xuICApOiBQcm9taXNlPHtcbiAgICB5ZWFyOiBudW1iZXI7XG4gICAgbW9udGg6IG51bWJlcjtcbiAgICBkYXk6IG51bWJlcjtcbiAgICBob3VyOiBudW1iZXI7XG4gICAgbWludXRlOiBudW1iZXI7XG4gICAgc2Vjb25kOiBudW1iZXI7XG4gICAgbWlsbGlzZWNvbmQ6IG51bWJlcjtcbiAgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcGF0dGVybiBzdHJpbmcgdG8gZm9ybWF0IGFuZCBwYXJzZSBkYXRlcyBhY2NvcmRpbmcgdG8gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9iamVjdCB3aXRoIHRoZSBmb3JtYXQgbGVuZ3RoIGFuZCBzZWxlY3RvclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IHBhdHRlcm46IHN0cmluZywgdGltZXpvbmU6IHN0cmluZywgdXRjX29mZnNldDogbnVtYmVyLCBkc3Rfb2Zmc2V0OiBudW1iZXIgfT59IFJldHVybnMgYSBwcm9taXNlLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZ2V0RGF0ZVBhdHRlcm4oXG4gICAgb3B0aW9uczogR2xvYmFsaXphdGlvbk9wdGlvbnNcbiAgKTogUHJvbWlzZTx7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIHRpbWV6b25lOiBzdHJpbmc7XG4gICAgaWFuYV90aW1lem9uZTogc3RyaW5nO1xuICAgIHV0Y19vZmZzZXQ6IG51bWJlcjtcbiAgICBkc3Rfb2Zmc2V0OiBudW1iZXI7XG4gIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgdGhlIG1vbnRocyBvciBkYXlzIG9mIHRoZSB3ZWVrLCBkZXBlbmRpbmcgb24gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMgYW5kIGNhbGVuZGFyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPYmplY3Qgd2l0aCB0eXBlIChuYXJyb3cgb3Igd2lkZSkgYW5kIGl0ZW0gKG1vbnRoIG9yIGRheXMpLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dmFsdWU6IHN0cmluZ1tdfT59IFJldHVybnMgYSBwcm9taXNlLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgZ2V0RGF0ZU5hbWVzKG9wdGlvbnM6IHsgdHlwZTogc3RyaW5nOyBpdGVtOiBzdHJpbmcgfSk6IFByb21pc2U8eyB2YWx1ZTogc3RyaW5nW10gfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciBkYXlsaWdodCBzYXZpbmdzIHRpbWUgaXMgaW4gZWZmZWN0IGZvciBhIGdpdmVuIGRhdGUgdXNpbmcgdGhlIGNsaWVudCdzIHRpbWUgem9uZSBhbmQgY2FsZW5kYXIuXG4gICAqIEBwYXJhbSB7ZGF0YX0gZGF0ZSBEYXRlIHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Byb21pc2U8e2RzdDogc3RyaW5nfT59IHJldXRybnMgYSBwcm9taXNlIHdpdGggdGhlIHZhbHVlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzRGF5TGlnaHRTYXZpbmdzVGltZShkYXRlOiBEYXRlKTogUHJvbWlzZTx7IGRzdDogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGFjY29yZGluZyB0byB0aGUgY2xpZW50J3MgdXNlciBwcmVmZXJlbmNlcyBhbmQgY2FsZW5kYXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt2YWx1ZTogc3RyaW5nfT59IHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHZhbHVlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEZpcnN0RGF5T2ZXZWVrKCk6IFByb21pc2U8eyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIG51bWJlciBmb3JtYXR0ZWQgYXMgYSBzdHJpbmcgYWNjb3JkaW5nIHRvIHRoZSBjbGllbnQncyB1c2VyIHByZWZlcmVuY2VzLlxuICAgKiBAcGFyYW0gbnVtYmVyVG9Db252ZXJ0IHtOdW1iZXJ9IFRoZSBudW1iZXIgdG8gY29udmVydFxuICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBPYmplY3Qgd2l0aCBwcm9wZXJ0eSBgdHlwZWAgdGhhdCBjYW4gYmUgc2V0IHRvOiBkZWNpbWFsLCBwZXJjZW50LCBvciBjdXJyZW5jeS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgbnVtYmVyVG9TdHJpbmcobnVtYmVyVG9Db252ZXJ0OiBudW1iZXIsIG9wdGlvbnM6IHsgdHlwZTogc3RyaW5nIH0pOiBQcm9taXNlPHsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdUb0NvbnZlcnQgU3RyaW5nIHlvdSB3YW50IHRvIGNvbnZlciB0byBhIG51bWJlclxuICAgKiBAcGFyYW0gb3B0aW9ucyAgVGhlIHR5cGUgb2YgbnVtYmVyIHlvdSB3YW50IHRvIHJldHVybi4gQ2FuIGJlIGRlY2ltYWwsIHBlcmNlbnQsIG9yIGN1cnJlbmN5LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IHZhbHVlOiBudW1iZXIgfCBzdHJpbmcgfT59IFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHZhbHVlLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICB9KVxuICBzdHJpbmdUb051bWJlcihzdHJpbmdUb0NvbnZlcnQ6IHN0cmluZywgb3B0aW9uczogeyB0eXBlOiBzdHJpbmcgfSk6IFByb21pc2U8eyB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHBhdHRlcm4gc3RyaW5nIHRvIGZvcm1hdCBhbmQgcGFyc2UgbnVtYmVycyBhY2NvcmRpbmcgdG8gdGhlIGNsaWVudCdzIHVzZXIgcHJlZmVyZW5jZXMuXG4gICAqIEBwYXJhbSBvcHRpb25zIENhbiBiZSBkZWNpbWFsLCBwZXJjZW50LCBvciBjdXJyZW5jeS5cbiAgICogQHJldHVybnMge1Byb21pc2U8eyBwYXR0ZXJuOiBzdHJpbmcsIHN5bWJvbDogc3RyaW5nLCBmcmFjdGlvbjogbnVtYmVyLCByb3VuZGluZzogbnVtYmVyLCBwb3NpdGl2ZTogc3RyaW5nLCBuZWdhdGl2ZTogc3RyaW5nLCBkZWNpbWFsOiBzdHJpbmcsIGdyb3VwaW5nOiBzdHJpbmcgfT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBnZXROdW1iZXJQYXR0ZXJuKG9wdGlvbnM6IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPHtcbiAgICBwYXR0ZXJuOiBzdHJpbmc7XG4gICAgc3ltYm9sOiBzdHJpbmc7XG4gICAgZnJhY3Rpb246IG51bWJlcjtcbiAgICByb3VuZGluZzogbnVtYmVyO1xuICAgIHBvc2l0aXZlOiBzdHJpbmc7XG4gICAgbmVnYXRpdmU6IHN0cmluZztcbiAgICBkZWNpbWFsOiBzdHJpbmc7XG4gICAgZ3JvdXBpbmc6IHN0cmluZztcbiAgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcGF0dGVybiBzdHJpbmcgdG8gZm9ybWF0IGFuZCBwYXJzZSBjdXJyZW5jeSB2YWx1ZXMgYWNjb3JkaW5nIHRvIHRoZSBjbGllbnQncyB1c2VyIHByZWZlcmVuY2VzIGFuZCBJU08gNDIxNyBjdXJyZW5jeSBjb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVuY3lDb2RlIEN1cnJlbmN5IENvZGUuQVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IHBhdHRlcm46IHN0cmluZywgY29kZTogc3RyaW5nLCBmcmFjdGlvbjogbnVtYmVyLCByb3VuZGluZzogbnVtYmVyLCBkZWNpbWFsOiBudW1iZXIsIGdyb3VwaW5nOiBzdHJpbmcgfT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEN1cnJlbmN5UGF0dGVybihcbiAgICBjdXJyZW5jeUNvZGU6IHN0cmluZ1xuICApOiBQcm9taXNlPHtcbiAgICBwYXR0ZXJuOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGZyYWN0aW9uOiBudW1iZXI7XG4gICAgcm91bmRpbmc6IG51bWJlcjtcbiAgICBkZWNpbWFsOiBudW1iZXI7XG4gICAgZ3JvdXBpbmc6IHN0cmluZztcbiAgfT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19