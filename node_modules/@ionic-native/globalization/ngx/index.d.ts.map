{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface GlobalizationOptions {\n    formatLength: string;\n    selector: string;\n}\n/**\n * @name Globalization\n * @premier globalization\n * @description\n * This plugin obtains information and performs operations specific to the user's locale, language, and timezone.\n *\n * @deprecated\n * With the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) now supported on iOS, Android and Windows devices, this plugin is not required any more.\n * Migrating from this plugin to the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) is explained in this [Cordova blog post](https://cordova.apache.org/news/2017/11/20/migrate-from-cordova-globalization-plugin.html).\n *\n * @usage\n * ```typescript\n * import { Globalization } from '@ionic-native/globalization/ngx';\n *\n * constructor(private globalization: Globalization) { }\n *\n *\n * ...\n *\n *\n * this.globalization.getPreferredLanguage()\n *   .then(res => console.log(res))\n *   .catch(e => console.log(e));\n *\n *\n * ```\n * @interfaces\n * GlobalizationOptions\n */\nexport declare class Globalization extends IonicNativePlugin {\n    /**\n     * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\n     * @returns {Promise<{value: string}>}\n     */\n    getPreferredLanguage(): Promise<{\n        value: string;\n    }>;\n    /**\n     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\n     * @returns {Promise<{value: string}>}\n     */\n    getLocaleName(): Promise<{\n        value: string;\n    }>;\n    /**\n     * Converts date to string\n     * @param {Date} date Date you wish to convert\n     * @param options Options for the converted date. Length, selector.\n     * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\n     */\n    dateToString(date: Date, options: GlobalizationOptions): Promise<{\n        value: string;\n    }>;\n    /**\n     * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\n     * @param {string} dateString Date as a string to be converted\n     * @param options Options for the converted date. Length, selector.\n     * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\n     */\n    stringToDate(dateString: string, options: GlobalizationOptions): Promise<{\n        year: number;\n        month: number;\n        day: number;\n        hour: number;\n        minute: number;\n        second: number;\n        millisecond: number;\n    }>;\n    /**\n     * Returns a pattern string to format and parse dates according to the client's user preferences.\n     * @param options Object with the format length and selector\n     * @returns {Promise<{ pattern: string, timezone: string, utc_offset: number, dst_offset: number }>} Returns a promise.\n     */\n    getDatePattern(options: GlobalizationOptions): Promise<{\n        pattern: string;\n        timezone: string;\n        iana_timezone: string;\n        utc_offset: number;\n        dst_offset: number;\n    }>;\n    /**\n     * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\n     * @param options Object with type (narrow or wide) and item (month or days).\n     * @returns {Promise<{value: string[]}>} Returns a promise.\n     */\n    getDateNames(options: {\n        type: string;\n        item: string;\n    }): Promise<{\n        value: string[];\n    }>;\n    /**\n     * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\n     * @param {data} date Date to process\n     * @returns {Promise<{dst: string}>} reutrns a promise with the value\n     */\n    isDayLightSavingsTime(date: Date): Promise<{\n        dst: string;\n    }>;\n    /**\n     * Returns the first day of the week according to the client's user preferences and calendar.\n     * @returns {Promise<{value: string}>} returns a promise with the value\n     */\n    getFirstDayOfWeek(): Promise<{\n        value: string;\n    }>;\n    /**\n     * Returns a number formatted as a string according to the client's user preferences.\n     * @param numberToConvert {Number} The number to convert\n     * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\n     */\n    numberToString(numberToConvert: number, options: {\n        type: string;\n    }): Promise<{\n        value: string;\n    }>;\n    /**\n     *\n     * @param {string} stringToConvert String you want to conver to a number\n     * @param options  The type of number you want to return. Can be decimal, percent, or currency.\n     * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\n     */\n    stringToNumber(stringToConvert: string, options: {\n        type: string;\n    }): Promise<{\n        value: number | string;\n    }>;\n    /**\n     * Returns a pattern string to format and parse numbers according to the client's user preferences.\n     * @param options Can be decimal, percent, or currency.\n     * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\n     */\n    getNumberPattern(options: {\n        type: string;\n    }): Promise<{\n        pattern: string;\n        symbol: string;\n        fraction: number;\n        rounding: number;\n        positive: string;\n        negative: string;\n        decimal: string;\n        grouping: string;\n    }>;\n    /**\n     * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\n     * @param {string} currencyCode Currency Code.A\n     * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\n     */\n    getCurrencyPattern(currencyCode: string): Promise<{\n        pattern: string;\n        code: string;\n        fraction: number;\n        rounding: number;\n        decimal: number;\n        grouping: string;\n    }>;\n}\n"]}