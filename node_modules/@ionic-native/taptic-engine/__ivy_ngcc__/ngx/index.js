import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var TapticEngine = /** @class */ (function (_super) {
    __extends(TapticEngine, _super);
    function TapticEngine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TapticEngine.prototype.selection = function () { return cordova(this, "selection", {}, arguments); };
    TapticEngine.prototype.notification = function (options) { return cordova(this, "notification", {}, arguments); };
    TapticEngine.prototype.impact = function (options) { return cordova(this, "impact", {}, arguments); };
    TapticEngine.prototype.gestureSelectionStart = function () { return cordova(this, "gestureSelectionStart", {}, arguments); };
    TapticEngine.prototype.gestureSelectionChanged = function () { return cordova(this, "gestureSelectionChanged", {}, arguments); };
    TapticEngine.prototype.gestureSelectionEnd = function () { return cordova(this, "gestureSelectionEnd", {}, arguments); };
    TapticEngine.pluginName = "TapticEngine";
    TapticEngine.plugin = "cordova-plugin-taptic-engine";
    TapticEngine.pluginRef = "TapticEngine";
    TapticEngine.repo = "https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine";
    TapticEngine.platforms = ["iOS"];
TapticEngine.ɵfac = function TapticEngine_Factory(t) { return ɵTapticEngine_BaseFactory(t || TapticEngine); };
TapticEngine.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TapticEngine, factory: function (t) { return TapticEngine.ɵfac(t); } });
var ɵTapticEngine_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TapticEngine);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TapticEngine, [{
        type: Injectable
    }], null, null); })();
    return TapticEngine;
}(IonicNativePlugin));
export { TapticEngine };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvdGFwdGljLWVuZ2luZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFDM0M7QUFJVSxJQTRCd0IsZ0NBQWlCO0FBQUM7QUFFOUI7QUFDRDtBQUFNLElBR3pCLGdDQUFTO0FBS2lCLElBTTFCLG1DQUFZLGFBQUMsT0FBa0Q7QUFLOUMsSUFNakIsNkJBQU0sYUFBQyxPQUFnRDtBQUs1QyxJQUlYLDRDQUFxQjtBQUtpQixJQUl0Qyw4Q0FBdUI7QUFLaUIsSUFJeEMsMENBQW1CO0FBSXNCO0FBQThDO0FBQTBEO0FBQTZDO0FBQTBGO2dEQTVEelIsVUFBVTs7Ozs7MEJBQ0w7QUFBQyx1QkFsQ1A7QUFBRSxFQWtDZ0MsaUJBQWlCO0FBQ2xELFNBRFksWUFBWTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgVGFwdGljIEVuZ2luZVxuICogQGRlc2NyaXB0aW9uXG4gKiBBbiBJb25pYyBwbHVnaW4gdG8gdXNlIFRhcHRpYyBFbmdpbmUgQVBJIG9uIGlQaG9uZSA3LCA3IFBsdXMgb3IgbmV3ZXIuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBUYXB0aWNFbmdpbmUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3RhcHRpYy1lbmdpbmUvbmd4JztcbiAqXG4gKiAuLi5cbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhcHRpYzogVGFwdGljRW5naW5lKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnRhcHRpYy5zZWxlY3Rpb24oKTtcbiAqXG4gKiB0aGlzLnRhcHRpYy5ub3RpZmljYXRpb24oKTtcbiAqXG4gKiB0aGlzLnRhcHRpYy5pbXBhY3QoKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdUYXB0aWNFbmdpbmUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi10YXB0aWMtZW5naW5lJyxcbiAgcGx1Z2luUmVmOiAnVGFwdGljRW5naW5lJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10YXB0aWMtZW5naW5lJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUYXB0aWNFbmdpbmUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBVc2Ugc2VsZWN0aW9uIGZlZWRiYWNrIGdlbmVyYXRvcnMgdG8gaW5kaWNhdGUgYSBjaGFuZ2UgaW4gc2VsZWN0aW9uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MgYW5kIHJlamVjdHMgb24gZXJyb3JcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VsZWN0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIGluZGljYXRlIHN1Y2Nlc3MvZmFpbHVyZS93YXJuaW5nIHRvIHRoZSB1c2VyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBzaG91bGQgYmUgb2YgdGhlIHR5cGUgeyB0eXBlOiAnc3VjY2VzcycgfSAob3IgJ3dhcm5pbmcnLydlcnJvcicpXG4gICAqIEBwYXJhbSB7J3N1Y2Nlc3MnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJ30gb3B0aW9ucy50eXBlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gc3VjY2VzcyBhbmQgcmVqZWN0cyBvbiBlcnJvclxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBub3RpZmljYXRpb24ob3B0aW9uczogeyB0eXBlOiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InIH0pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byBpbmRpY2F0ZSBzdWNjZXNzL2ZhaWx1cmUvd2FybmluZyB0byB0aGUgdXNlci5cbiAgICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0gc2hvdWxkIGJlIG9mIHRoZSB0eXBlIHsgc3R5bGU6ICdsaWdodCcgfSAob3IgJ21lZGl1bScvJ2hlYXZ5JylcbiAgICogQHBhcmFtIHsnbGlnaHQnIHwgJ21lZGl1bScgfCAnaGVhdnknfSBvcHRpb25zLnR5cGVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvbiBzdWNjZXNzIGFuZCByZWplY3RzIG9uIGVycm9yXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGltcGFjdChvcHRpb25zOiB7IHN0eWxlOiAnbGlnaHQnIHwgJ21lZGl1bScgfCAnaGVhdnknIH0pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIHRoZSB0YXB0aWMgZW5naW5lIHRoYXQgYSBnZXN0dXJlIGZvciBhIHNlbGVjdGlvbiBjaGFuZ2UgaXMgc3RhcnRpbmcuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdlc3R1cmVTZWxlY3Rpb25TdGFydCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIHRoZSB0YXB0aWMgZW5naW5lIHRoYXQgYSBzZWxlY3Rpb24gY2hhbmdlZCBkdXJpbmcgYSBnZXN0dXJlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXN0dXJlU2VsZWN0aW9uQ2hhbmdlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIHRoZSB0YXB0aWMgZW5naW5lIHdlIGFyZSBkb25lIHdpdGggYSBnZXN0dXJlLiBUaGlzIG5lZWRzIHRvIGJlIGNhbGxlZCBsZXN0IHJlc291cmNlcyBhcmUgbm90IHByb3Blcmx5IHJlY3ljbGVkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXN0dXJlU2VsZWN0aW9uRW5kKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=