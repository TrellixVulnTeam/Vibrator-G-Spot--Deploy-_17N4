{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Taptic Engine\n * @description\n * An Ionic plugin to use Taptic Engine API on iPhone 7, 7 Plus or newer.\n *\n * @usage\n * ```typescript\n * import { TapticEngine } from '@ionic-native/taptic-engine/ngx';\n *\n * ...\n *\n * constructor(private taptic: TapticEngine) { }\n *\n * ...\n *\n * this.taptic.selection();\n *\n * this.taptic.notification();\n *\n * this.taptic.impact();\n *\n * ```\n */\nexport declare class TapticEngine extends IonicNativePlugin {\n    /**\n     * Use selection feedback generators to indicate a change in selection.\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n     */\n    selection(): Promise<any>;\n    /**\n     * Use this to indicate success/failure/warning to the user.\n     * @param options {Object} should be of the type { type: 'success' } (or 'warning'/'error')\n     * @param {'success' | 'warning' | 'error'} options.type\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n     */\n    notification(options: {\n        type: 'success' | 'warning' | 'error';\n    }): Promise<any>;\n    /**\n     * Use this to indicate success/failure/warning to the user.\n     * @param options {Object} should be of the type { style: 'light' } (or 'medium'/'heavy')\n     * @param {'light' | 'medium' | 'heavy'} options.type\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n     */\n    impact(options: {\n        style: 'light' | 'medium' | 'heavy';\n    }): Promise<any>;\n    /**\n     * Tell the taptic engine that a gesture for a selection change is starting.\n     * @returns {Promise<any>}\n     */\n    gestureSelectionStart(): Promise<any>;\n    /**\n     * Tell the taptic engine that a selection changed during a gesture.\n     * @returns {Promise<any>}\n     */\n    gestureSelectionChanged(): Promise<any>;\n    /**\n     * Tell the taptic engine we are done with a gesture. This needs to be called lest resources are not properly recycled.\n     * @returns {Promise<any>}\n     */\n    gestureSelectionEnd(): Promise<any>;\n}\n"]}